" Settings
" -------------------------
set clipboard=unnamed
set number                          " show line numbers
set cursorline                      " highlight current line
set laststatus=2                    " last window always has a statusline
set hlsearch                        " highlight searched phrases
set ignorecase                      " make searches case-insensitive
set smartcase                       " ignore case unless there is an uppercase letter
set ruler                           " always show info along bottom
set showmatch
set wildmenu
set wildignorecase
set splitbelow
set splitright
set autoindent                      " auto-indent
set tabstop=2                       " tab spacing
set softtabstop=2                   " unify
set shiftwidth=2                    " indent/outdent by 2 columns
set shiftround                      " always indent/outdent to the nearest tabstop
set expandtab                       " use spaces instead of tabs
set smarttab                        " use tabs at the start of a line, spaces elsewhere
set shortmess+=I                    " hide the launch screen
set visualbell
set noshowmode
set scrolloff=2
set sidescroll=1
set sidescrolloff=5
set noswapfile
set undofile
set autowriteall
set confirm
set updatetime=150
set lazyredraw                      " redraw only when we need to.
set mouse=a
set title                           " enable setting title
set titlestring=%F%a%r%m            " configure title to look like: /path/to/file
set titlelen=120

filetype indent on
syntax on
autocmd FocusGained,BufEnter * silent! checktime                " reload buffer when focus changes
autocmd FocusLost,Bufleave * silent! wa                         " save buffer when focus changes
autocmd StdinReadPost * set buftype=nofile
autocmd BufEnter * silent! lcd %:p:h                            " use folder from current file


" Plugins
" -------------------------

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'matze/vim-move'
Plug 'terryma/vim-expand-region'
Plug 't9md/vim-smalls'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale'
Plug 'mattn/emmet-vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'google/vim-searchindex'
Plug 'jiangmiao/auto-pairs'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'sbdchd/neoformat'
Plug 'sheerun/vim-polyglot'
Plug 'ap/vim-buftabline'
Plug 'itchyny/lightline.vim'
Plug 'rakr/vim-one'
call plug#end()


" Key Bindings
" -------------------------

let mapleader = " "
nmap <silent> Q :qa<CR>
nmap U <C-r>
nmap <silent> gt :bnext<CR>
nmap <silent> gr :bprev<CR>
inoremap <M-CR> <Esc>o
inoremap <S-CR> <Esc>O
nnoremap <M-CR> o<Esc>
nnoremap <S-CR> O<Esc>
nnoremap <silent> <Esc> :noh<CR>
nnoremap <C-CR> i<CR><Esc>
nnoremap <C-n> <Tab>
nnoremap <Leader>o :e
nnoremap <silent> <Leader>n :enew<CR>
nnoremap <Leader>w :terminal<CR>
nnoremap <Leader>W :split<CR>:terminal<CR>
nnoremap <Leader>s <C-w>s
nnoremap <Leader>v <C-w>v
nnoremap <Leader>c :bp\|bd #<CR>
nnoremap <Leader><Leader> :w<CR>
nnoremap <silent> <Leader>C <C-w>c
nnoremap <Leader>r :%s///gc<Left><Left><Left><Left>
vnoremap <Leader>r :s///gc<Left><Left><Left><Left>
map ö [
map ä ]

" indent with tab key
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-d>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" easier page navigation
nnoremap <C-d> 20<C-e>
nnoremap <C-u> 20<C-y>
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
noremap ß $
nnoremap <BS> {
nnoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
onoremap <expr> <CR> empty(&buftype) ? '}' : '<CR>'
vnoremap <BS> {
vnoremap <CR> }
nnoremap ü <C-^>

" make Y yank until end of line
nnoremap Y y$

" have x (removes single character) not go into the default registry
noremap x "_x
noremap X "_X
"
" make quotes into movements
onoremap q i"
onoremap Q i'
onoremap aq a"
onoremap aQ a'

vnoremap q i"
vnoremap Q i'
vnoremap aq a"
vnoremap aQ a'

" navigate splits
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>

" search files and buffers
nmap <silent><C-p> :FZF --prompt= $HOME<CR>
imap <silent><C-p> <Esc>:FZF --prompt= $HOME<CR>
nmap <silent><Leader><CR> :Buffers<CR>

" toggle comment
nmap <M--> <Plug>CommentaryLine j0
vmap <M--> <Plug>Commentary

" make f search for 2 chars
nmap <Leader>f <Plug>(smalls)

" select current word
imap <C-f> <Esc><C-f>

" toggle word case
nnoremap <M-u> viw~
inoremap <M-u> <Esc>viw~ea

" format buffer
nmap <silent><Leader>p :Neoformat<CR>
vmap <silent><Leader>p :Neoformat<CR>

" navigate to error
nmap <silent> <f2> <Plug>(ale_next_wrap)
nmap <silent> <S-f2> <Plug>(ale_previous_wrap)

" add macOS shortcuts for editing in insert mode
inoremap <M-b> <C-Left>
inoremap <M-f> <Esc>ea
inoremap <M-BS> <C-w>
inoremap <M-d> <C-O>de
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-x><BS> <C-u>
inoremap <C-k> <C-o>D
inoremap <C-_> <C-o>u
inoremap <C-x><C-_> <C-O><C-r>
inoremap <C-u> <Esc>ddI

" add macOS shortcuts for editing in command mode
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <M-BS> <C-w>
cnoremap <C-x><BS> <C-u>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>


" Other
" -------------------------

" colorscheme
colorscheme one
highlight Normal ctermbg=white
highlight Directory gui=bold
highlight Comment gui=italic
highlight Search guibg=#EBCB8B guifg=#3C3C3C
highlight Incsearch gui=none guibg=#EBCB8B guifg=#3C3C3C
call one#highlight('xmlNamespace', 'e45649', '', 'none')
call one#highlight('xmlAttribPunct', 'e45649', '', 'none')

" corlorscheme for terminal
let g:terminal_color_0 = '#3c3c3c'
let g:terminal_color_1 = '#e45649'
let g:terminal_color_2 = '#50a14f'
let g:terminal_color_3 = '#ebcb8b'
let g:terminal_color_4 = '#4078f2'
let g:terminal_color_5 = '#a626a4'
let g:terminal_color_6 = '#0184bc'
let g:terminal_color_7 = '#a0a1a7'
let g:terminal_color_8 = '#3c3c3c'
let g:terminal_color_9 = '#e45649'
let g:terminal_color_10 = '#50a14f'
let g:terminal_color_11 = '#c18401'
let g:terminal_color_12 = '#4078f2'
let g:terminal_color_13 = '#a626a4'
let g:terminal_color_14 = '#0184bc'
let g:terminal_color_15 = '#fafafa'

" buffline
let g:buftabline_show = 1
let g:buftabline_indicators = 1
highlight default link BufTabLineHidden PmenuSel

" smalls
let g:smalls_auto_jump = 1
let g:smalls_shade = 0
let g:smalls_jump_keys = 'ASDFJKLQWERZXCNMUIOP'
let g:smalls_auto_jump_min_input_length = 1
let g:smalls_auto_jump_timeout = 0.0
let g:smalls_highlight = {
    \ 'SmallsJumpTarget':
    \     [['NONE', 'NONE', 'Red'],[ 'bold', '#FDD945', 'Black']],
    \ 'SmallsCandidate':
    \     [['NONE', 'Gray', 'Magenta'],[ 'NONE', '#DCDCDC', 'Red']],
    \ 'SmallsPos':
    \     [['NONE', 'Green', 'Black'],[ 'NONE', '#4078F2', 'White']],
    \ }

" gitgutter
let g:gitgutter_realtime = 1
let g:gitgutter_sign_added = '█'
let g:gitgutter_sign_modified = '█'
let g:gitgutter_sign_removed = '▁'
let g:gitgutter_sign_modified_removed = '█'

" autopairs
let g:AutoPairsShortcutBackInsert = ''

" fzf
let g:fzf_layout = { 'down': '~30%' }

" vinegar
" don't show hidden files
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" set pwd to current directory
let g:netrw_keepdir=0

" neoformat
autocmd FileType javascript,typescript setlocal formatprg=prettier
    \\ --stdin
    \\ --print-width\ 120
    \\ --single-quote
    \\ --trailing-comma\ es5
autocmd FileType xml,html setlocal formatprg=js-beautify\ --type\ html\ --quiet\ --wrap-line-length\ 120\ -
let g:neoformat_enabled_json = ['jq']
let g:neoformat_basic_format_align = 1
let g:neoformat_basic_format_retab = 1
let g:neoformat_try_formatprg = 1

" ale
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_sign_error = '✖︎'
let g:ale_sign_warning = '⚠'
autocmd InsertLeave,TextChanged * silent! if (&filetype ==# 'json' || &filetype ==# 'xml') | ALELint | endif
highlight ALEError guibg=#e45649 guifg=white cterm=undercurl

" emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
autocmd FileType html,css imap <silent><expr><tab> emmet#expandAbbrIntelligent("\<tab>")

" fix whitespace
autocmd BufEnter * highlight clear ExtraWhitespace      " don't show whitespace
autocmd BufWrite * FixWhitespace

" show highlight groups at cursor
nmap <Leader>k :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" lightline
let g:lightline = {
    \ 'colorscheme': 'one',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component': {
    \   'readonly': '%{&filetype=="help"?"":&readonly?"":""}',
    \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
    \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
    \ },
    \ 'component_visible_condition': {
    \   'readonly': '(&filetype!="help"&& &readonly)',
    \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
    \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
    \ },
    \ 'separator': { 'left': '', 'right': '' },
    \ 'subseparator': { 'left': '', 'right': '' }
    \ }

if has('nvim')
    if (has("termguicolors"))
        set termguicolors
    endif
    set signcolumn=yes

    " no line highlight in terminal
    autocmd TermOpen * setlocal listchars= | set nocursorline | set nocursorcolumn

    tnoremap jj <C-\><C-n>
    tnoremap kk <C-\><C-n>

    autocmd! FileType fzf
    autocmd  FileType fzf setlocal laststatus=0 noruler titlestring=fzf
        \| autocmd BufLeave <buffer> set laststatus=2 ruler titlestring=%F%a%r%m

    function! Tmpwatch(path, days)
        let l:path = expand(a:path)
        if isdirectory(l:path)
            for file in split(globpath(l:path, "*"), "\n")
                if localtime() > getftime(file) + 86400 * a:days && delete(file) != 0
                    echo "Tmpwatch(): Error deleting '" . file . "'"
                endif
            endfor
        else
            echo "Tmpwatch(): Directory '" . l:path . "' not found"
        endif
    endfunction

    " remove undo files which have not been modified for 30 days
    call Tmpwatch(&undodir, 30)
endif

" vimr
if has("gui_vimr")
    nmap <silent><D-p> :FZF --prompt= $HOME<CR>
    imap <silent><D-p> <Esc>:FZF --prompt= $HOME<CR>

    " add macOS shortcuts for editing in insert mode
    inoremap <M-Left> <C-Left>
    inoremap <M-Right> <Esc>ea
    inoremap <M-BS> <C-w>
    inoremap <M-DEL> <C-O>de
    inoremap <D-BS> <C-u>
    inoremap <D-DEL> <C-o>D
    inoremap <D-Left> <Home>
    inoremap <D-Right> <End>

    " toggle word case
    nnoremap <S-D-u> viw~
    inoremap <S-D-u> <Esc>viw~ea

    " vim move
    let g:move_key_modifier = 'D'

    " toggle comment
    nmap <D-S-m> <Plug>CommentaryLine j0
    vmap <D-S-m> <Plug>Commentary

    nmap <M-D-z> <Leader>hu

    nnoremap <C-g> i<CR><Esc>
    inoremap <D-g> <Esc>o
    inoremap <S-D-g> <Esc>O
    nnoremap <D-g> o<Esc>
    nnoremap <S-D-g> O<Esc>
endif

