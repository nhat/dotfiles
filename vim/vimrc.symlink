" settings

set nocompatible
set clipboard=unnamed
set number                " show line numbers
set cul                   " highlight current line
set laststatus=2          " last window always has a statusline
set hlsearch              " highlight searched phrases
set incsearch             " highlight as you type your search
set ignorecase            " make searches case-insensitive
set smartcase			  " ignore case unless there is an uppercase letter
set ruler                 " always show info along bottom
set showmatch
set wildmenu
set splitbelow
set splitright
set autoindent            " auto-indent
set tabstop=4             " tab spacing
set softtabstop=4         " unify
set shiftwidth=4          " indent/outdent by 4 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab             " use spaces instead of tabs
set smarttab              " use tabs at the start of a line, spaces elsewhere
set nowrap                " don't wrap text
set noeb vb t_vb=
set noshowmode
set scrolloff=1
set sidescroll=1
set sidescrolloff=5
set noswapfile
set undofile
set autowriteall
set hidden
set updatetime=150
set mouse=a
set title                                              " enable setting title
set titlestring=%25.105F%a%r%m titlelen=120            " configure title to look like: /path/to/file

filetype on
syntax on
autocmd FocusGained,BufEnter * silent! checktime       " reload buffer when focus changes
autocmd FocusLost,Bufleave * silent! wa                " save buffer when focus changes
autocmd StdinReadPost * set buftype=nofile


" plugins

call plug#begin('~/.vim/plugged')
Plug 'ctrlpvim/ctrlp.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'matze/vim-move'
Plug 'terryma/vim-expand-region'
Plug 'sjl/vitality.vim'
Plug 't9md/vim-smalls'
Plug 'airblade/vim-gitgutter'
Plug 'jiangmiao/auto-pairs'
Plug 'ap/vim-buftabline'
Plug 'itchyny/lightline.vim'
Plug 'rakr/vim-one'
call plug#end()


" key bindings

let mapleader = " "
nmap Q :qa<CR>
nmap U <C-r>
nmap <silent> gt :bnext<CR>
nmap <silent> gr :bprev<CR>
imap jj <Esc>
imap kk <Esc>
noremap , '
inoremap <M-CR> <Esc>o
inoremap <S-CR> <Esc>O
nnoremap <M-CR> o<Esc>
nnoremap <S-CR> O<Esc>
nnoremap <silent> <Esc> :noh<CR>
nnoremap <C-CR> i<CR><Esc>
nnoremap <C-n> <Tab>
nnoremap <Leader>o :e 
nnoremap <silent> <Leader>n :enew<CR>
nnoremap <Leader>w :terminal<CR>
nnoremap <Leader>W :split<CR>:terminal<CR>
nnoremap <Leader>s <C-w>s
nnoremap <Leader>v <C-w>v
nnoremap <Leader>C <C-w>c
nnoremap <Leader><Leader> :w<CR>
nnoremap <silent> <Leader>c :bw<CR>
nnoremap <Leader>r :%s///gc<Left><Left><Left><Left>
vnoremap <Leader>r :s///gc<Left><Left><Left><Left>

" indent with tab key
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-d>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" easier page navigation
nnoremap <C-e> <C-u>
nnoremap <C-u> <C-e>
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" make Y yank until end of line
nnoremap Y y$

" have x (removes single character) not go into the default registry
nnoremap x "_x

" make X an operator that removes text without placing text in the default registry
nmap X "_d
nmap XX "_dd
vmap X "_d
vmap x "_d

" toggle comment
nmap <M--> <Plug>CommentaryLine<CR>
vmap <M--> <Plug>Commentary

" make f search for 2 chars
nmap f <Plug>(smalls)
omap f <Plug>(smalls)
xmap f <Plug>(smalls)

" add macOS shortcuts for editing in insert mode
inoremap <M-b> <C-Left>
inoremap <M-f> <Esc>ea
inoremap <M-BS> <C-W>
inoremap <M-d> <C-O>de
inoremap <C-A> <Home>
inoremap <C-E> <End>
inoremap <C-X><BS> <C-U>
inoremap <C-K> <C-O>D
inoremap <C-_> <C-O>u
inoremap <C-X><C-_> <C-O><C-r>


" other

colorscheme one
highlight Directory gui=bold
highlight Comment gui=italic
hi Search guibg=#EBCB8B guifg=#3C3C3C
hi Incsearch gui=none guibg=#EBCB8B guifg=#3C3C3C

let g:buftabline_show=1
let g:buftabline_indicators=1

let g:smalls_auto_jump = 1
let g:smalls_shade = 0
let g:smalls_jump_keys = 'ASDFJKLQWERZXCNMUIOP'
let g:smalls_auto_jump_min_input_length = 2
let g:smalls_auto_jump_timeout = 0.0
let g:smalls_highlight = {
    \ 'SmallsJumpTarget':
    \     [['NONE', 'NONE', 'Red'],[ 'bold', '#FDD945', 'Black']],
    \ 'SmallsCandidate':
    \     [['NONE', 'Gray', 'Magenta'],[ 'NONE', '#DCDCDC', 'Red']],
    \ 'SmallsPos':
    \     [['NONE', 'Green', 'Black'],[ 'NONE', '#4078F2', 'White']],
    \ }

let g:gitgutter_sign_column_always = 1
let g:gitgutter_realtime = 1
let g:gitgutter_sign_added = '█'
let g:gitgutter_sign_modified = '█'
let g:gitgutter_sign_removed = '▁'
let g:gitgutter_sign_modified_removed = '█▁'

let g:AutoPairsShortcutBackInsert = ''

let g:ctrlp_show_hidden=1
let g:ctrlp_match_window_reversed=0
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|Trash)$'

let g:lightline = {
    \ 'colorscheme': 'one',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component': {
    \   'readonly': '%{&filetype=="help"?"":&readonly?"":""}',
    \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
    \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
    \ },
    \ 'component_visible_condition': {
    \   'readonly': '(&filetype!="help"&& &readonly)',
    \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
    \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
    \ },
    \ 'separator': { 'left': '', 'right': '' },
    \ 'subseparator': { 'left': '', 'right': '' }
    \ }

if has('nvim')
    if (has("termguicolors"))
        set termguicolors
    endif
    autocmd TermOpen * setlocal listchars= | set nocursorline | set nocursorcolumn  " no line highlight in terminal
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
    tnoremap <Esc><Esc> <C-\><C-n>

    " hack to get C-h working in neovim
    nmap <BS> <C-h>

    function! Tmpwatch(path, days)
        let l:path = expand(a:path)
        if isdirectory(l:path)
            for file in split(globpath(l:path, "*"), "\n")
                if localtime() > getftime(file) + 86400 * a:days && delete(file) != 0
                    echo "Tmpwatch(): Error deleting '" . file . "'"
                endif
            endfor
        else
            echo "Tmpwatch(): Directory '" . l:path . "' not found"
        endif
    endfunction

    " remove undo files which have not been modified for 30 days
    call Tmpwatch(&undodir, 30)
endif

